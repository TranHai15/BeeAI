import React, { useState, useEffect } from "react";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from "chart.js";
import axiosClient from "../../../../api/axiosClient";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Dashboard = () => {
  const [timeRange, setTimeRange] = useState("day"); // State cho kho·∫£ng th·ªùi gian
  const [totalQuestions, setTotalQuestions] = useState(50); // T·ªïng s·ªë c√¢u h·ªèi
  const [chartData, setChartData] = useState({
    labels: ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß Nh·∫≠t"],
    datasets: [
      {
        label: "S·ªë c√¢u h·ªèi",
        data: [50, 60, 45, 70, 80, 90, 100],
        borderColor: "#007bff",
        backgroundColor: "rgba(0, 123, 255, 0.2)",
        tension: 0.4
      }
    ]
  });

  // G·ªçi API khi thay ƒë·ªïi kho·∫£ng th·ªùi gian
  useEffect(() => {
    async function fetchData() {
      // D·ªØ li·ªáu gi·∫£ l·∫≠p, thay b·∫±ng API th·ª±c t·∫ø
      const res = await axiosClient.get("/api/dashboard");
      console.log("üöÄ ~ fetchData ~ res:", res.data.NumberHistoryChat);
      const apiData = {
        day: { totalQuestions: 50, chartData: [10, 15, 20, 10, 30, 50, 60] },
        threeDays: {
          totalQuestions: 150,
          chartData: [40, 50, 60, 70, 80, 90, 100]
        },
        week: {
          totalQuestions: 500,
          chartData: [150, 200, 180, 220, 300, 250, 400]
        },
        month: {
          totalQuestions: 2000,
          chartData: [500, 600, 700, 800, 750, 900, 950]
        },
        sixMonths: {
          totalQuestions: 10000,
          chartData: [1500, 1600, 1700, 1800, 1900, 2000, 2100]
        },
        all: {
          totalQuestions: 50000,
          chartData: [5000, 6000, 7000, 8000, 9000, 10000, 11000]
        }
      };

      const data = apiData[timeRange]; // L·∫•y d·ªØ li·ªáu theo kho·∫£ng th·ªùi gian

      setTotalQuestions(data.totalQuestions); // C·∫≠p nh·∫≠t t·ªïng s·ªë c√¢u h·ªèi
      setChartData({
        ...chartData,
        datasets: [{ ...chartData.datasets[0], data: data.chartData }]
      });
    }

    fetchData();
  }, [timeRange]); // C·∫≠p nh·∫≠t khi `timeRange` thay ƒë·ªïi

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      {/* B·ªô l·ªçc th·ªùi gian */}
      <div className="flex justify-end mb-6">
        <select
          value={timeRange}
          onChange={(e) => setTimeRange(e.target.value)}
          className="p-3 border border-gray-300 rounded-md bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="day">Trong ng√†y</option>
          <option value="threeDays">3 ng√†y qua</option>
          <option value="week">Trong tu·∫ßn</option>
          <option value="month">Trong th√°ng</option>
          <option value="sixMonths">6 th√°ng qua</option>
          <option value="all">T·∫•t c·∫£</option>
        </select>
      </div>

      {/* T·ªïng s·ªë c√¢u h·ªèi */}
      <div className="bg-white p-6 rounded-lg shadow-md text-center">
        <h2 className="text-xl font-semibold mb-2">T·ªïng s·ªë c√¢u h·ªèi</h2>
        <p className="text-3xl font-bold">{totalQuestions}</p>
      </div>

      {/* Bi·ªÉu ƒë·ªì */}
      <div className="bg-white p-6 rounded-lg shadow-md mt-6">
        <h2 className="text-xl font-semibold mb-4">Bi·ªÉu ƒë·ªì c√¢u h·ªèi</h2>
        <Line
          data={chartData}
          options={{
            responsive: true,
            plugins: {
              legend: { position: "top" },
              title: { display: true, text: "S·ªë l∆∞·ª£ng c√¢u h·ªèi theo th·ªùi gian" }
            }
          }}
        />
      </div>
    </div>
  );
};

export default Dashboard;
