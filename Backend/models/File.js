import XLSX from "xlsx";
import puppeteer from "puppeteer";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";
import connectDatabase from "../db.js";
import axios from "axios";
import FormData from "form-data";

// Convert import.meta.url to a filesystem path
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class fileModel {
  constructor() {
    this.connection = null;
  }

  // K·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu khi t·∫°o ƒë·ªëi t∆∞·ª£ng User
  async connect() {
    if (!this.connection) {
      this.connection = await connectDatabase();
      console.log("Database connected");
    }
  }

  // ƒê√≥ng k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu
  async closeConnection() {
    if (this.connection) {
      await this.connection.end();
      this.connection = null;
      console.log("Database connection closed");
    }
  }
  // Th√™m file v√†o c∆° s·ªü d·ªØ li·ªáu
  static async insertFileDatabase(fileName, filePath, fileType) {
    const user = new fileModel();
    await user.connect();
    const insertQuery = `
      INSERT INTO file_uploads (file_name, file_path, file_type)
      VALUES (?, ?, ?)
    `;
    try {
      const [result] = await user.connection.execute(insertQuery, [
        fileName,
        filePath,
        fileType,
      ]);
      console.log("Th√™m file g·ªëc th√†nh c√¥ng:", result.insertId);
      return result.insertId; // Tr·∫£ v·ªÅ ID c·ªßa file ƒë√£ th√™m v√†o database
    } catch (error) {
      console.error("L·ªói khi th√™m file v√†o database:", error);
      throw error;
    }
  }

  // X·ª≠ l√Ω file v√† chuy·ªÉn ƒë·ªïi sang PDF
  static async processFilesAndConvertPDF(files) {
    let txtFiles = [];
    let xlsxFiles = [];

    // Ph√¢n lo·∫°i file v√†o c√°c m·∫£ng t∆∞∆°ng ·ª©ng (txt v√† xlsx)
    files.forEach((file) => {
      const fileExt = path.extname(file.filename).toLowerCase();
      if (fileExt === ".txt") {
        txtFiles.push(file);
      } else if (fileExt === ".xlsx") {
        xlsxFiles.push(file);
      }
    });

    // Ki·ªÉm tra n·∫øu c√≥ file .xlsx th√¨ m·ªõi x·ª≠ l√Ω
    if (xlsxFiles.length > 0) {
      for (const file of xlsxFiles) {
        const filePath = path.join(__dirname, "../uploads", file.filename);
        const fileExt = path.extname(file.filename).toLowerCase();

        await fileModel.insertFileDatabase(file.filename, filePath, fileExt);

        if (fileExt === ".xlsx") {
          const workbook = XLSX.readFile(filePath);
          const sheetNames = workbook.SheetNames;

          sheetNames.forEach(async (sheetName) => {
            const sheet = workbook.Sheets[sheetName];
            const data = XLSX.utils.sheet_to_json(sheet, { defval: "" }); // defval: "" ƒë·ªÉ ƒë·∫£m b·∫£o c√°c √¥ tr·ªëng l√† chu·ªói r·ªóng

            if (data.length > 0) {
              // T·∫°o ƒë∆∞·ªùng d·∫´n PDF cho t·ª´ng file
              const pdfFilePath = path.join(
                __dirname,
                "../pdf",
                `${file.filename}_output.pdf`
              );

              // Chuy·ªÉn d·ªØ li·ªáu c·ªßa t·ª´ng file th√†nh PDF m√† kh√¥ng c·∫ßn g·ªôp l·∫°i
              await fileModel.convertExcelToPDF(data, pdfFilePath); // ƒê·∫£m b·∫£o ƒë√¢y l√† h√†m async
            }
          });
        }
      }
    } else {
      console.log("No .xlsx files to process");
    }

    // Ki·ªÉm tra n·∫øu c√≥ file .txt th√¨ m·ªõi x·ª≠ l√Ω
    if (txtFiles.length > 0) {
      let combinedData = ""; // Bi·∫øn l∆∞u tr·ªØ d·ªØ li·ªáu g·ªôp t·ª´ t·∫•t c·∫£ c√°c file .txt
      for (const file of txtFiles) {
        const filePath = path.join(__dirname, "../uploads", file.filename);
        const fileExt = path.extname(file.filename).toLowerCase();
        await fileModel.insertFileDatabase(file.filename, filePath, fileExt);

        const data = fs.readFileSync(filePath, "utf-8");
        const content = data
          .split("\n")
          .map((row) => row.trim())
          .join("\n");

        // G·ªôp d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c file .txt
        combinedData += content + "\n\n";
      }

      // N·∫øu c√≥ d·ªØ li·ªáu g·ªôp ƒë∆∞·ª£c, chuy·ªÉn th√†nh PDF
      if (combinedData) {
        const pdfFilePath = path.join(
          __dirname,
          "../merge",
          "combined_output.txt.pdf" // T√™n file PDF ƒë·∫ßu ra
        );

        // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë√£ g·ªôp th√†nh PDF
        await fileModel.convertTextToPDF(combinedData, pdfFilePath);
      }
    } else {
      console.log("No .txt files to process");
    }
  }

  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu Excel th√†nh PDF
  static async convertExcelToPDF(fileData, pdfOutputPath) {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();

    // T·∫°o n·ªôi dung HTML t·ª´ d·ªØ li·ªáu Excel d·∫°ng b·∫£ng
    let htmlContent = "<html><body>";

    // T·∫°o b·∫£ng v·ªõi ti√™u ƒë·ªÅ
    htmlContent += "<h2>D·ªØ li·ªáu t·ª´ file Excel</h2>";

    // T·∫°o b·∫£ng HTML
    htmlContent +=
      "<table border='1' style='border-collapse: collapse; width: 100%;'>";

    // L·∫•y danh s√°ch c√°c keys t·ª´ row ƒë·∫ßu ti√™n ƒë·ªÉ t·∫°o header
    const headers = Object.keys(fileData[0]);

    // T·∫°o header cho b·∫£ng
    htmlContent += "<thead><tr>";
    headers.forEach((header) => {
      htmlContent += `<th style='padding: 5px;'>${header}</th>`;
    });
    htmlContent += "</tr></thead>";

    // T·∫°o d·ªØ li·ªáu cho b·∫£ng
    htmlContent += "<tbody>";
    fileData.forEach((row) => {
      htmlContent += "<tr>";
      headers.forEach((header) => {
        htmlContent += `<td style='padding: 5px;'>${row[header] || "N/A"}</td>`; // Hi·ªÉn th·ªã gi√° tr·ªã m·ªói c·ªôt
      });
      htmlContent += "</tr>";
    });
    htmlContent += "</tbody>";

    htmlContent += "</table>";
    htmlContent += "</body></html>";

    await page.setContent(htmlContent);

    // T·∫°o file PDF t·ª´ n·ªôi dung HTML ƒë√£ ƒë·ªãnh d·∫°ng
    await page.pdf({
      path: pdfOutputPath,
      format: "A4",
      printBackground: true,
    });
    console.log(
      "üöÄ ~ fileModel ~ convertExcelToPDF ~ pdfOutputPath:",
      pdfOutputPath
    );
    await fileModel.sendFile(pdfOutputPath);
    await browser.close();
  }

  // Chuy·ªÉn ƒë·ªïi n·ªôi dung vƒÉn b·∫£n th√†nh PDF
  static async convertTextToPDF(textContent, pdfOutputPath) {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();

    const htmlContent = `<html><body><pre>${textContent}</pre></body></html>`;
    await page.setContent(htmlContent);

    await page.pdf({
      path: pdfOutputPath,
      format: "A4",
      printBackground: true,
    });
    await fileModel.sendFile(pdfOutputPath);
    await browser.close();
  }
  // L·∫•y to√†n b·ªô file
  static async getAllFiles() {
    const user = new fileModel();
    await user.connect();
    const query = `SELECT * FROM file_uploads;
  `;
    try {
      const [rows] = await user.connection.execute(query);
      return rows; // Tr·∫£ v·ªÅ t·∫•t c·∫£ ng∆∞·ªùi d√πng
    } catch (error) {
      console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng∆∞·ªùi d√πng:", error);
      throw error;
    } finally {
      await user.closeConnection(); // ƒê√≥ng k·∫øt n·ªëi
    }
  }
  // lay mot file
  static async getOneFiles(id) {
    const user = new fileModel();
    await user.connect();
    const query = `SELECT * FROM file_uploads where id =?;
  `;
    try {
      const [rows] = await user.connection.execute(query, [id]);
      return rows; // Tr·∫£ v·ªÅ t·∫•t c·∫£ ng∆∞·ªùi d√πng
    } catch (error) {
      console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng∆∞·ªùi d√πng:", error);
      throw error;
    } finally {
      await user.closeConnection(); // ƒê√≥ng k·∫øt n·ªëi
    }
  }
  // lay mot file
  static async getFilePathById(id) {
    const user = new fileModel();
    await user.connect();
    const query = `SELECT file_path FROM file_uploads where id = ?`;
    try {
      const [rows] = await user.connection.execute(query, [id]);
      // console.log("üöÄ ~ fileModel ~ getFilePathById ~ rows:", rows);
      return rows; // Tr·∫£ v·ªÅ t·∫•t c·∫£ ng∆∞·ªùi d√πng
    } catch (error) {
      console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng∆∞·ªùi d√πng:", error);
      throw error;
    } finally {
      await user.closeConnection(); // ƒê√≥ng k·∫øt n·ªëi
    }
  }
  // xoa file
  static async deleteFile(id) {
    const user = new fileModel();
    await user.connect();

    const query = `DELETE FROM file_uploads WHERE id = ?`;

    try {
      const [result] = await user.connection.execute(query, [id]);
      return result.affectedRows; // Tr·∫£ v·ªÅ s·ªë b·∫£n ghi ƒë√£ x√≥a
    } catch (error) {
      console.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error);
      throw error;
    } finally {
      await user.closeConnection(); // ƒê√≥ng k·∫øt n·ªëi
    }
  }
  //
  static async sendFile(
    pdfFilePath,
    uploadUrl = "https://36f0-2405-4802-1804-8c70-d92d-4e6-c0b-f789.ngrok-free.app/upload"
  ) {
    try {
      // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
      if (!fs.existsSync(pdfFilePath)) {
        console.error("File kh√¥ng t·ªìn t·∫°i:", pdfFilePath);
        return; // D·ª´ng l·∫°i n·∫øu file kh√¥ng t·ªìn t·∫°i
      }

      // M·ªü stream file PDF
      const fileStream = fs.createReadStream(pdfFilePath);

      // T·∫°o ƒë·ªëi t∆∞·ª£ng FormData ƒë·ªÉ g·ª≠i file
      const formData = new FormData();

      // Th√™m file v√†o FormData, g·ª≠i d∆∞·ªõi t√™n tr∆∞·ªùng 'file' v√† t√™n file g·ªëc
      formData.append("file", fileStream);

      // G·ª≠i y√™u c·∫ßu POST ƒë·∫øn API ƒë√≠ch
      const response = await axios.post(uploadUrl, formData, {
        headers: {
          ...formData.getHeaders(), // ƒê·∫£m b·∫£o g·ª≠i ƒë√∫ng headers cho FormData
        },
      });

      // Tr·∫£ v·ªÅ response n·∫øu th√†nh c√¥ng
      console.log("File uploaded successfully:", response.data);
      return response.data;
    } catch (error) {
      // X·ª≠ l√Ω l·ªói n·∫øu c√≥
      console.error("Error uploading file:", error);
      throw error; // N√©m l·∫°i l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü n∆°i g·ªçi h√†m
    }
  }
}

export default fileModel;
