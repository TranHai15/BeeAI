import XLSX from "xlsx";
import puppeteer from "puppeteer";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";
import connectDatabase from "../db.js";

// Convert import.meta.url to a filesystem path
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class fileModel {
  constructor() {
    this.connection = null;
  }

  // K·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu khi t·∫°o ƒë·ªëi t∆∞·ª£ng User
  async connect() {
    if (!this.connection) {
      this.connection = await connectDatabase();
      console.log("Database connected");
    }
  }

  // ƒê√≥ng k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu
  async closeConnection() {
    if (this.connection) {
      await this.connection.end();
      this.connection = null;
      console.log("Database connection closed");
    }
  }
  // Th√™m file v√†o c∆° s·ªü d·ªØ li·ªáu
  static async insertFileDatabase(fileName, filePath, fileType) {
    const user = new fileModel();
    await user.connect();
    const insertQuery = `
      INSERT INTO file_uploads (file_name, file_path, file_type)
      VALUES (?, ?, ?)
    `;
    try {
      const [result] = await user.connection.execute(insertQuery, [
        fileName,
        filePath,
        fileType,
      ]);
      console.log("Th√™m file g·ªëc th√†nh c√¥ng:", result.insertId);
      return result.insertId; // Tr·∫£ v·ªÅ ID c·ªßa file ƒë√£ th√™m v√†o database
    } catch (error) {
      console.error("L·ªói khi th√™m file v√†o database:", error);
      throw error;
    }
  }

  // X·ª≠ l√Ω file v√† chuy·ªÉn ƒë·ªïi sang PDF
  static async processFilesAndConvertPDF(files) {
    for (const file of files) {
      const filePath = path.join(__dirname, "../uploads", file.filename);
      const fileExt = path.extname(file.filename).toLowerCase();

      let fileData = [];
      let headers = [];
      await fileModel.insertFileDatabase(file.filename, filePath, fileExt);

      if (fileExt === ".xlsx") {
        const workbook = XLSX.readFile(filePath);
        const sheetNames = workbook.SheetNames;

        sheetNames.forEach((sheetName) => {
          const sheet = workbook.Sheets[sheetName];
          const data = XLSX.utils.sheet_to_json(sheet);

          if (data.length > 0) {
            if (headers.length === 0) {
              headers = Object.keys(data[0]);
            }
            fileData.push(...data);
          }
        });

        if (fileData.length > 0) {
          const pdfFilePath = path.join(
            __dirname,
            "../pdf",
            `${file.filename}_output.pdf`
          );
          await fileModel.convertExcelToPDF(fileData, headers, pdfFilePath);
        }
      } else if (fileExt === ".txt") {
        const data = fs.readFileSync(filePath, "utf-8");
        const content = data
          .split("\n")
          .map((row) => row.trim())
          .join("\n");

        const pdfFilePath = path.join(
          __dirname,
          "../pdf",
          `${file.filename}_output.pdf`
        );
        await fileModel.convertTextToPDF(content, pdfFilePath);
      }
    }
  }

  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu Excel th√†nh PDF
  static async convertExcelToPDF(fileData, headers, pdfOutputPath) {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();

    // T·∫°o n·ªôi dung HTML t·ª´ d·ªØ li·ªáu Excel kh√¥ng d√πng b·∫£ng
    let htmlContent = "<html><body>";

    // Hi·ªÉn th·ªã headers nh∆∞ l√† ti√™u ƒë·ªÅ
    htmlContent += "<h2>D·ªØ li·ªáu t·ª´ file Excel</h2>";
    htmlContent += "<div><strong>Headers:</strong><ul>";
    headers.forEach((header) => {
      htmlContent += `<li>${header}</li>`;
    });
    htmlContent += "</ul></div>";

    // Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ng d√≤ng
    htmlContent += "<div><strong>D·ªØ li·ªáu:</strong><ul>";
    fileData.forEach((row) => {
      htmlContent += "<li>";
      headers.forEach((header) => {
        htmlContent += `${header}: ${row[header] || "N/A"}, `;
      });
      htmlContent = htmlContent.slice(0, -2); // X√≥a d·∫•u ", " cu·ªëi c√πng
      htmlContent += "</li>";
    });
    htmlContent += "</ul></div>";

    htmlContent += "</body></html>";

    await page.setContent(htmlContent);

    await page.pdf({
      path: pdfOutputPath,
      format: "A4",
      printBackground: true,
    });

    await browser.close();
  }

  // Chuy·ªÉn ƒë·ªïi n·ªôi dung vƒÉn b·∫£n th√†nh PDF
  static async convertTextToPDF(textContent, pdfOutputPath) {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();

    const htmlContent = `<html><body><pre>${textContent}</pre></body></html>`;
    await page.setContent(htmlContent);

    await page.pdf({
      path: pdfOutputPath,
      format: "A4",
      printBackground: true,
    });

    await browser.close();
  }
  // L·∫•y to√†n b·ªô file
  static async getAllFiles() {
    const user = new fileModel();
    await user.connect();
    const query = `SELECT * FROM file_uploads;
  `;
    try {
      const [rows] = await user.connection.execute(query);
      return rows; // Tr·∫£ v·ªÅ t·∫•t c·∫£ ng∆∞·ªùi d√πng
    } catch (error) {
      console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng∆∞·ªùi d√πng:", error);
      throw error;
    } finally {
      await user.closeConnection(); // ƒê√≥ng k·∫øt n·ªëi
    }
  }
  // lay mot file
  static async getOneFiles(id) {
    const user = new fileModel();
    await user.connect();
    const query = `SELECT * FROM file_uploads where id =?;
  `;
    try {
      const [rows] = await user.connection.execute(query, [id]);
      return rows; // Tr·∫£ v·ªÅ t·∫•t c·∫£ ng∆∞·ªùi d√πng
    } catch (error) {
      console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng∆∞·ªùi d√πng:", error);
      throw error;
    } finally {
      await user.closeConnection(); // ƒê√≥ng k·∫øt n·ªëi
    }
  }
  // lay mot file
  static async getFilePathById(id) {
    const user = new fileModel();
    await user.connect();
    const query = `SELECT file_path FROM file_uploads where id = ?`;
    try {
      const [rows] = await user.connection.execute(query, [id]);
      console.log("üöÄ ~ fileModel ~ getFilePathById ~ rows:", rows);
      return rows; // Tr·∫£ v·ªÅ t·∫•t c·∫£ ng∆∞·ªùi d√πng
    } catch (error) {
      console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng∆∞·ªùi d√πng:", error);
      throw error;
    } finally {
      await user.closeConnection(); // ƒê√≥ng k·∫øt n·ªëi
    }
  }
  // xoa file
  static async deleteFile(id) {
    const user = new fileModel();
    await user.connect();

    const query = `DELETE FROM file_uploads WHERE id = ?`;

    try {
      const [result] = await user.connection.execute(query, [id]);
      return result.affectedRows; // Tr·∫£ v·ªÅ s·ªë b·∫£n ghi ƒë√£ x√≥a
    } catch (error) {
      console.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error);
      throw error;
    } finally {
      await user.closeConnection(); // ƒê√≥ng k·∫øt n·ªëi
    }
  }
}

export default fileModel;
